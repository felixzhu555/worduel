{"ast":null,"code":"import _toConsumableArray from \"/Users/felix_3gpdyfd/webdev_projects/worduel-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/felix_3gpdyfd/webdev_projects/worduel-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/felix_3gpdyfd/webdev_projects/worduel-app/src/pages/Wordle.js\";\nimport React, { useState } from \"react\";\nimport LetterGrid from \"../components/LetterGrid\";\n\nvar fs = require(\"fs-extra\");\n\nfunction Wordle() {\n  var isLetter = function isLetter(c) {\n    return c.length === 1 && c.toLowerCase() !== c.toUpperCase();\n  };\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      pastGuesses = _useState2[0],\n      setPastGuesses = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentGuess = _useState4[0],\n      setCurrentGuess = _useState4[1];\n\n  var _useState5 = useState(\"Can you guess the word within six tries?\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      message = _useState6[0],\n      setMessage = _useState6[1];\n\n  var answer = \"cheat\";\n\n  var handleKeyPress = function handleKeyPress(e) {\n    if (currentGuess === \"game over\") {\n      return;\n    }\n\n    if (isLetter(e.key)) {\n      if (currentGuess.length < 5) {\n        setCurrentGuess(currentGuess + e.key);\n      }\n    } else if (e.key === \"Backspace\" && currentGuess.length > 0) {\n      setCurrentGuess(currentGuess.substring(0, currentGuess.length - 1));\n    } else if (e.key === \"Enter\" && currentGuess.length === 5) {\n      // TODO: check if guess is a real word\n      // right now it just takes the guess no matter what\n      setPastGuesses(function (pastGuesses) {\n        return [].concat(_toConsumableArray(pastGuesses), [currentGuess]);\n      });\n\n      if (currentGuess === answer) {\n        setMessage(\"You got it! Nice job ðŸ˜Ž\");\n        setCurrentGuess(\"game over\");\n      } else if (pastGuesses.length === 5) {\n        // idk why =5 is correct??? async sus\n        setMessage(\"Tough luck, the word was \" + answer + \".\");\n        setCurrentGuess(\"game over\");\n      } else {\n        setCurrentGuess(\"\");\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onKeyDown: handleKeyPress,\n    tabIndex: 0,\n    style: {\n      outline: \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, \"Wordle!\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, message), /*#__PURE__*/React.createElement(LetterGrid, {\n    pastGuesses: pastGuesses,\n    currentGuess: currentGuess,\n    answer: answer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Wordle;","map":{"version":3,"names":["React","useState","LetterGrid","fs","require","Wordle","isLetter","c","length","toLowerCase","toUpperCase","pastGuesses","setPastGuesses","currentGuess","setCurrentGuess","message","setMessage","answer","handleKeyPress","e","key","substring","outline"],"sources":["/Users/felix_3gpdyfd/webdev_projects/worduel-app/src/pages/Wordle.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport LetterGrid from \"../components/LetterGrid\";\nconst fs = require(\"fs-extra\");\n\nfunction Wordle() {\n\n    const isLetter = (c) => {\n        return c.length === 1 && c.toLowerCase() !== c.toUpperCase();\n      }\n\n    const [pastGuesses, setPastGuesses] = useState([]);\n    const [currentGuess, setCurrentGuess] = useState(\"\");\n    const [message, setMessage] = useState(\"Can you guess the word within six tries?\");\n    const answer = \"cheat\";\n\n    const handleKeyPress = (e) => {\n        if (currentGuess === \"game over\") {\n            return;\n        }\n        if (isLetter(e.key)) {\n            if (currentGuess.length < 5) {\n                setCurrentGuess(currentGuess + e.key);\n            }\n        } else if (e.key === \"Backspace\" && currentGuess.length > 0) {\n            setCurrentGuess(currentGuess.substring(0, currentGuess.length - 1));\n        } else if (e.key === \"Enter\" && currentGuess.length === 5) {\n            // TODO: check if guess is a real word\n            // right now it just takes the guess no matter what\n            setPastGuesses((pastGuesses) => [...pastGuesses, currentGuess]);\n            if (currentGuess === answer) {\n                setMessage(\"You got it! Nice job ðŸ˜Ž\");\n                setCurrentGuess(\"game over\");\n            } else if (pastGuesses.length === 5) {  // idk why =5 is correct??? async sus\n                setMessage(\"Tough luck, the word was \" + answer + \".\");\n                setCurrentGuess(\"game over\");\n            } else {\n                setCurrentGuess(\"\");\n            }\n        }\n    }\n\n    return (\n        <div onKeyDown={handleKeyPress} tabIndex={0} style={{outline: \"none\"}}>\n            <h1>Wordle!</h1>\n            <h3>{message}</h3>\n            <LetterGrid pastGuesses={pastGuesses} currentGuess={currentGuess} answer={answer}/>\n        </div>\n    )\n}\n\nexport default Wordle;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;AACA,IAAMC,EAAE,GAAGC,OAAO,CAAC,UAAD,CAAlB;;AAEA,SAASC,MAAT,GAAkB;EAEd,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,CAAD,EAAO;IACpB,OAAOA,CAAC,CAACC,MAAF,KAAa,CAAb,IAAkBD,CAAC,CAACE,WAAF,OAAoBF,CAAC,CAACG,WAAF,EAA7C;EACD,CAFH;;EAFc,gBAMwBT,QAAQ,CAAC,EAAD,CANhC;EAAA;EAAA,IAMPU,WANO;EAAA,IAMMC,cANN;;EAAA,iBAO0BX,QAAQ,CAAC,EAAD,CAPlC;EAAA;EAAA,IAOPY,YAPO;EAAA,IAOOC,eAPP;;EAAA,iBAQgBb,QAAQ,CAAC,0CAAD,CARxB;EAAA;EAAA,IAQPc,OARO;EAAA,IAQEC,UARF;;EASd,IAAMC,MAAM,GAAG,OAAf;;EAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,CAAD,EAAO;IAC1B,IAAIN,YAAY,KAAK,WAArB,EAAkC;MAC9B;IACH;;IACD,IAAIP,QAAQ,CAACa,CAAC,CAACC,GAAH,CAAZ,EAAqB;MACjB,IAAIP,YAAY,CAACL,MAAb,GAAsB,CAA1B,EAA6B;QACzBM,eAAe,CAACD,YAAY,GAAGM,CAAC,CAACC,GAAlB,CAAf;MACH;IACJ,CAJD,MAIO,IAAID,CAAC,CAACC,GAAF,KAAU,WAAV,IAAyBP,YAAY,CAACL,MAAb,GAAsB,CAAnD,EAAsD;MACzDM,eAAe,CAACD,YAAY,CAACQ,SAAb,CAAuB,CAAvB,EAA0BR,YAAY,CAACL,MAAb,GAAsB,CAAhD,CAAD,CAAf;IACH,CAFM,MAEA,IAAIW,CAAC,CAACC,GAAF,KAAU,OAAV,IAAqBP,YAAY,CAACL,MAAb,KAAwB,CAAjD,EAAoD;MACvD;MACA;MACAI,cAAc,CAAC,UAACD,WAAD;QAAA,oCAAqBA,WAArB,IAAkCE,YAAlC;MAAA,CAAD,CAAd;;MACA,IAAIA,YAAY,KAAKI,MAArB,EAA6B;QACzBD,UAAU,CAAC,yBAAD,CAAV;QACAF,eAAe,CAAC,WAAD,CAAf;MACH,CAHD,MAGO,IAAIH,WAAW,CAACH,MAAZ,KAAuB,CAA3B,EAA8B;QAAG;QACpCQ,UAAU,CAAC,8BAA8BC,MAA9B,GAAuC,GAAxC,CAAV;QACAH,eAAe,CAAC,WAAD,CAAf;MACH,CAHM,MAGA;QACHA,eAAe,CAAC,EAAD,CAAf;MACH;IACJ;EACJ,CAxBD;;EA0BA,oBACI;IAAK,SAAS,EAAEI,cAAhB;IAAgC,QAAQ,EAAE,CAA1C;IAA6C,KAAK,EAAE;MAACI,OAAO,EAAE;IAAV,CAApD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,aADJ,eAEI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAKP,OAAL,CAFJ,eAGI,oBAAC,UAAD;IAAY,WAAW,EAAEJ,WAAzB;IAAsC,YAAY,EAAEE,YAApD;IAAkE,MAAM,EAAEI,MAA1E;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAHJ,CADJ;AAOH;;AAED,eAAeZ,MAAf"},"metadata":{},"sourceType":"module"}