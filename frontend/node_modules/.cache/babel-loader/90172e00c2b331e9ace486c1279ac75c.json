{"ast":null,"code":"import _toConsumableArray from \"/Users/felix_3gpdyfd/webdev_projects/worduel-app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/felix_3gpdyfd/webdev_projects/worduel-app/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/felix_3gpdyfd/webdev_projects/worduel-app/frontend/src/pages/Wordle.js\";\nimport React, { useState } from \"react\";\nimport { Button } from \"reactstrap\";\nimport LetterGrid from \"../components/LetterGrid\";\nimport * as data from \"../wordle-words.json\";\n\nfunction Wordle() {\n  var words = data.words;\n\n  var isLetter = function isLetter(c) {\n    return c.length === 1 && c.toLowerCase() !== c.toUpperCase();\n  };\n\n  var getRandomInt = function getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  };\n\n  var refreshWordle = function refreshWordle() {\n    setAnswer(words[getRandomInt(words.length)]);\n    setPastGuesses([]);\n    setCurrentGuess(\"\");\n    setMessage(\"Can you guess the word within six tries?\");\n    setGameOver(false);\n  };\n\n  var _useState = useState(words[getRandomInt(words.length)]),\n      _useState2 = _slicedToArray(_useState, 2),\n      answer = _useState2[0],\n      setAnswer = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      pastGuesses = _useState4[0],\n      setPastGuesses = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentGuess = _useState6[0],\n      setCurrentGuess = _useState6[1];\n\n  var _useState7 = useState(\"Can you guess the word within six tries?\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      message = _useState8[0],\n      setMessage = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      gameOver = _useState10[0],\n      setGameOver = _useState10[1]; // TODO: fix issue where keypresses aren't registered unless the div is clicked\n  // e.g. if the page is refreshed and you immediately type, nothing happens\n\n\n  var handleKeyPress = function handleKeyPress(e) {\n    if (currentGuess === \"game over\") {\n      return;\n    }\n\n    if (isLetter(e.key)) {\n      if (currentGuess.length < 5) {\n        setCurrentGuess(currentGuess + e.key);\n      }\n    } else if (e.key === \"Backspace\" && currentGuess.length > 0) {\n      setCurrentGuess(currentGuess.substring(0, currentGuess.length - 1));\n    } else if (e.key === \"Enter\" && currentGuess.length === 5) {\n      if (!words.includes(currentGuess)) {\n        // TODO: add alert: not valid word\n        return;\n      }\n\n      setPastGuesses(function (pastGuesses) {\n        return [].concat(_toConsumableArray(pastGuesses), [currentGuess]);\n      });\n\n      if (currentGuess === answer) {\n        setMessage(\"You got it! Nice job ðŸ˜Ž\");\n        setCurrentGuess(\"game over\");\n        setGameOver(true);\n      } else if (pastGuesses.length === 5) {\n        setMessage(\"Tough luck, the word was \" + answer.toUpperCase() + \".\");\n        setCurrentGuess(\"game over\");\n        setGameOver(true);\n      } else {\n        setCurrentGuess(\"\");\n      }\n    }\n  };\n\n  var buttonsDiv = gameOver ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    href: \"/\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, \"Main Menu\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: refreshWordle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, \"Play Again\")) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    href: \"/\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, \"Main Menu\"));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onKeyDown: handleKeyPress,\n    tabIndex: 0,\n    style: {\n      outline: \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, \"Wordle! \", answer), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, message), buttonsDiv, /*#__PURE__*/React.createElement(LetterGrid, {\n    pastGuesses: pastGuesses,\n    currentGuess: currentGuess,\n    answer: answer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Wordle;","map":{"version":3,"names":["React","useState","Button","LetterGrid","data","Wordle","words","isLetter","c","length","toLowerCase","toUpperCase","getRandomInt","max","Math","floor","random","refreshWordle","setAnswer","setPastGuesses","setCurrentGuess","setMessage","setGameOver","answer","pastGuesses","currentGuess","message","gameOver","handleKeyPress","e","key","substring","includes","buttonsDiv","outline"],"sources":["/Users/felix_3gpdyfd/webdev_projects/worduel-app/frontend/src/pages/Wordle.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from \"reactstrap\";\nimport LetterGrid from \"../components/LetterGrid\";\nimport * as data from \"../wordle-words.json\";\n\nfunction Wordle() {\n    \n    const words = data.words;\n\n    const isLetter = (c) => {\n        return c.length === 1 && c.toLowerCase() !== c.toUpperCase();\n    }\n\n    const getRandomInt = (max) => {\n        return Math.floor(Math.random() * max);\n    }\n\n    const refreshWordle = () => {\n        setAnswer(words[getRandomInt(words.length)]);\n        setPastGuesses([]);\n        setCurrentGuess(\"\");\n        setMessage(\"Can you guess the word within six tries?\");\n        setGameOver(false);\n    }\n\n    const [answer, setAnswer] = useState(words[getRandomInt(words.length)]);\n    const [pastGuesses, setPastGuesses] = useState([]);\n    const [currentGuess, setCurrentGuess] = useState(\"\");\n    const [message, setMessage] = useState(\"Can you guess the word within six tries?\");\n    const [gameOver, setGameOver] = useState(false);\n    \n    // TODO: fix issue where keypresses aren't registered unless the div is clicked\n    // e.g. if the page is refreshed and you immediately type, nothing happens\n    const handleKeyPress = (e) => {\n        if (currentGuess === \"game over\") {\n            return;\n        }\n        if (isLetter(e.key)) {\n            if (currentGuess.length < 5) {\n                setCurrentGuess(currentGuess + e.key);\n            }\n        } else if (e.key === \"Backspace\" && currentGuess.length > 0) {\n            setCurrentGuess(currentGuess.substring(0, currentGuess.length - 1));\n        } else if (e.key === \"Enter\" && currentGuess.length === 5) {\n            if (!words.includes(currentGuess)) {\n                // TODO: add alert: not valid word\n                return;\n            }\n            setPastGuesses((pastGuesses) => [...pastGuesses, currentGuess]);\n            if (currentGuess === answer) {\n                setMessage(\"You got it! Nice job ðŸ˜Ž\");\n                setCurrentGuess(\"game over\");\n                setGameOver(true);\n            } else if (pastGuesses.length === 5) {\n                setMessage(\"Tough luck, the word was \" + answer.toUpperCase() + \".\");\n                setCurrentGuess(\"game over\");\n                setGameOver(true);\n            } else {\n                setCurrentGuess(\"\");\n            }\n        }\n    }\n\n    var buttonsDiv = gameOver ? (\n        <div>\n            <Button href=\"/\" color=\"primary\">Main Menu</Button>\n            <Button onClick={refreshWordle}>Play Again</Button>\n        </div>\n    ) : (\n        <div>\n            <Button href=\"/\" color=\"primary\">Main Menu</Button>\n        </div>\n    );\n\n    return (\n        <div onKeyDown={handleKeyPress} tabIndex={0} style={{outline: \"none\"}}>\n            <h1>Wordle! {answer}</h1>\n            <h3>{message}</h3>\n            {buttonsDiv}\n            <LetterGrid pastGuesses={pastGuesses} currentGuess={currentGuess} answer={answer}/>\n        </div>\n    )\n}\n\nexport default Wordle;"],"mappings":"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"},"metadata":{},"sourceType":"module"}